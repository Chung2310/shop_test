package com.example.shop.service;

import com.example.shop.model.ApiResponse;
import com.example.shop.model.PasswordResetToken;
import com.example.shop.model.User;
import com.example.shop.repository.PasswordResetTokenRepository;
import com.example.shop.security.JwtTokenProvider;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Date;

@Service
public class PasswordResetService {

    @Autowired
    private PasswordResetTokenRepository passwordResetTokenRepository;
    @Autowired
    private UserService userService;
    @Autowired
    private EmailService emailService;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private JwtTokenProvider jwtTokenProvider;
    @Autowired
    private static final Logger log = LoggerFactory.getLogger(PasswordResetService.class);

    public ResponseEntity<ApiResponse<String>> createPasswordResetTokenForEmail(String email) {
        log.info("üì© Y√™u c·∫ßu reset m·∫≠t kh·∫©u cho email: {}", email);

        if (email == null) {
            log.warn("‚ùå Thi·∫øu th√¥ng tin email ƒë·∫ßu v√†o");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                    new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Thi·∫øu th√¥ng tin email ƒë·∫ßu v√†o", null)
            );
        }

        User user = userService.findUserByEmail(email);
        log.debug("üîç T√¨m th·∫•y user: {}", user != null ? user.getEmail() : "Kh√¥ng t√¨m th·∫•y");

        if (user == null || "ROLE_ADMIN".equals(user.getRole())) {
            log.warn("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c l√† admin: {}", email);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                    new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!", null)
            );
        }

        if(passwordResetTokenRepository.existsByUserId(user.getId())) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                    new ApiResponse<>(HttpStatus.BAD_REQUEST.value(),"B·∫°n ƒë√£ y√™u c·∫ßu reset m·∫≠t kh·∫©u tr∆∞·ªõc ƒë√≥. Vui l√≤ng ki·ªÉm tra email!",null)
            );
        }

        String token = jwtTokenProvider.generateAccessToken(user);
        log.info("‚úÖ Token reset password ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng: {}", token);

        PasswordResetToken passwordResetToken = new PasswordResetToken(user, token, LocalDateTime.now());
        passwordResetTokenRepository.save(passwordResetToken);
        log.info("üíæ ƒê√£ l∆∞u PasswordResetToken v√†o database cho user: {}", email);

        emailService.sendResetPasswordEmail(user.getEmail(), token);
        log.info("üì® ƒê√£ g·ª≠i email reset m·∫≠t kh·∫©u cho: {}", email);

        return ResponseEntity.status(HttpStatus.OK).body(
                new ApiResponse<>(HttpStatus.OK.value(), "Y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!", null)
        );
    }

    public void resetPassword(String token, String newPassword) {
        log.info("üîë B·∫Øt ƒë·∫ßu x·ª≠ l√Ω reset password v·ªõi token: {}", token);

        PasswordResetToken prt = passwordResetTokenRepository.findByToken(token)
                .orElseThrow(() -> {
                    log.error("‚ùå Token kh√¥ng h·ª£p l·ªá: {}", token);
                    return new RuntimeException("Token kh√¥ng h·ª£p l·ªá");
                });

        Date expiration = jwtTokenProvider.getExpirationDate(prt.getToken());
        log.debug("üìÖ Token h·∫øt h·∫°n v√†o: {}", expiration);

        if (expiration.before(new Date())) {
            log.warn("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n: {}", token);
            passwordResetTokenRepository.delete(prt);
            log.info("üóëÔ∏è ƒê√£ x√≥a token h·∫øt h·∫°n kh·ªèi database");
            return;
        }

        User user = prt.getUser();
        log.info("üë§ ƒêang c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho user: {}", user.getEmail());

        user.setPassword(passwordEncoder.encode(newPassword));
        userService.saveUser(user);
        log.info("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng cho: {}", user.getEmail());

        passwordResetTokenRepository.delete(prt);
        log.info("üóëÔ∏è ƒê√£ x√≥a token sau khi reset password th√†nh c√¥ng");
    }
}
