package com.example.shop.service;

import com.example.shop.model.auth.PasswordResetToken;
import com.example.shop.model.auth.register.RegisterRequest;
import com.example.shop.model.user.Role;
import com.example.shop.mapper.UserMapper;
import com.example.shop.model.auth.login.LoginRequest;
import com.example.shop.model.auth.RefreshTokenRequest;
import com.example.shop.model.*;
import com.example.shop.model.user.UserEntity;
import com.example.shop.model.user.UserResponse;
import com.example.shop.repository.PasswordResetTokenRepository;
import com.example.shop.security.JwtTokenProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;

@Service
public class AuthService implements UserDetailsService {

    @Autowired
    private UserService userService;

    @Autowired
    private JwtTokenProvider jwtTokenProvider;

    @Autowired
    private UserMapper userMapper;

    @Autowired
    private PasswordResetTokenRepository passwordResetTokenRepository;

    @Autowired
    private EmailService emailService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Value("${app.frontend.reset-url}")
    private String resetUrlPrefix;


    private static final Logger log = LoggerFactory.getLogger(AuthService.class);

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        log.info("üîç [loadUserByUsername] ƒêang t√¨m ng∆∞·ªùi d√πng theo email: {}", email);
        if(email == null ){
            return null;
        }

        UserEntity userEntity = userService.findUserByEmail(email);

        if (userEntity == null) {
            log.warn(" [loadUserByUsername] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: {}", email);
            throw new UsernameNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
        }

        log.debug(" [loadUserByUsername] T√¨m th·∫•y ng∆∞·ªùi d√πng: {}", userEntity);

        return new User(
                userEntity.getEmail(),
                userEntity.getPassword(),
                new ArrayList<>()
        );
    }

    public ResponseEntity<ApiResponse<UserResponse>> login(LoginRequest loginRequest) {
        log.info(" [login] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëƒÉng nh·∫≠p cho: {}", loginRequest.getEmail());
        if(loginRequest.getEmail() == null || loginRequest.getPassword() == null){
            return ResponseHandler.generateResponse(Messages.MISSING_REQUIRED_INFO,HttpStatus.BAD_REQUEST,null);
        }

        UserEntity userEntity = userService.findUserByEmail(loginRequest.getEmail());
        if (userEntity == null) {
            log.warn(" [login] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: {}", loginRequest.getEmail());
            return ResponseHandler.generateResponse(Messages.USER_NOT_FOUND,HttpStatus.NOT_FOUND,null);
        }

        PasswordEncoder encoder = new BCryptPasswordEncoder();
        if (!encoder.matches(loginRequest.getPassword(), userEntity.getPassword())) {
            log.warn(" [login] M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng cho email: {}", loginRequest.getEmail());
            return ResponseHandler.generateResponse(Messages.INVALID_CREDENTIALS,HttpStatus.UNAUTHORIZED,null);
        }

        String accessToken = jwtTokenProvider.generateAccessToken(userEntity);
        String refreshToken = jwtTokenProvider.generateRefreshToken(userEntity);

        log.info(" [login] Access Token: {}", accessToken);
        log.info(" [login] Refresh Token: {}", refreshToken);

        UserResponse userResponse = userMapper.toUserResponse(userEntity);
        userResponse.setToken(accessToken);
        userResponse.setRefreshToken(refreshToken);

        log.info("[login] token: {}",accessToken);

        log.info(" [login] ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho: {}", loginRequest.getEmail());

        return ResponseHandler.generateResponse(Messages.LOGIN_SUCCESS,HttpStatus.OK, userResponse);
    }

    public ResponseEntity<ApiResponse<String>> register(RegisterRequest registerRequest) {

        String email = registerRequest.getEmail();
        String fullName = registerRequest.getFullName();

        log.info("Y√™u c·∫ßu ƒëƒÉng k√Ω v·ªõi email: {}", email);
        if(email == null || registerRequest.getPassword() == null || fullName == null){
            return ResponseHandler.generateResponse(Messages.MISSING_REQUIRED_INFO,HttpStatus.BAD_REQUEST,null);
        }

        // Ki·ªÉm tra n·∫øu email ƒë√£ t·ªìn t·∫°i
        if (userService.findUserByEmail(email) != null) {
            log.warn("Email {} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.", email);
            return ResponseHandler.generateResponse(Messages.USER_ALREADY_EXISTS,HttpStatus.CONFLICT,null);
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

        UserEntity user = new UserEntity();
        user.setPassword(passwordEncoder.encode(registerRequest.getPassword()));
        user.setFullName(fullName);
        user.setEmail(email);
        user.setRole(Role.valueOf("ROLE_"+registerRequest.getRole()));

        log.debug("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a cho email: {}", email);
        if (user.getRole() == Role.ROLE_SELLER){
            user.setRole(Role.ROLE_SELLER);
        } else{
            user.setRole(Role.ROLE_CUSTOMER);
        }

        UserEntity savedUserEntity = userService.saveUser(user);
        log.info("T·∫°o m·ªõi ng∆∞·ªùi d√πng th√†nh c√¥ng: ID = {}, Email = {}", savedUserEntity.getId(), savedUserEntity.getEmail());

        return ResponseHandler.generateResponse(Messages.USER_CREATED,HttpStatus.CREATED, null);
    }

    public ResponseEntity<ApiResponse<RefreshTokenRequest>> refreshToken(RefreshTokenRequest refreshTokenRequest) {
        try {
            if(refreshTokenRequest.getAccessToken() == null || refreshTokenRequest.getRefreshToken() == null){
                return ResponseHandler.generateResponse(Messages.MISSING_REQUIRED_INFO,HttpStatus.BAD_REQUEST,null);
            }

            if (!jwtTokenProvider.validateToken(refreshTokenRequest.getRefreshToken())) {
                log.warn("Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
                return ResponseHandler.generateResponse(Messages.INVALID_INPUT,HttpStatus.UNAUTHORIZED,null);
            }

            // 2. Tr√≠ch xu·∫•t username t·ª´ token c≈©
            String email = jwtTokenProvider.extractUsername(refreshTokenRequest.getRefreshToken());
            log.info("ƒêang l√†m m·ªõi token cho user: {}", email);

            // 3. T√¨m user v√† t·∫°o token m·ªõi
            UserEntity userEntity = userService.findUserByEmail(email);

            RefreshTokenRequest response = new RefreshTokenRequest();
            response.setAccessToken(jwtTokenProvider.generateAccessToken(userEntity));
            response.setRefreshToken(jwtTokenProvider.generateRefreshToken(userEntity));

            log.info("Token m·ªõi ƒë∆∞·ª£c t·∫°o cho user: {}", email);

            return ResponseHandler.generateResponse(Messages.REFRESH_TOKEN_SUCCESS,HttpStatus.OK,response);

        } catch (Exception e) {
            log.error("L·ªói khi l√†m m·ªõi token: {}", e.getMessage(), e);
            return ResponseHandler.generateResponse(Messages.SYSTEM_ERROR,HttpStatus.INTERNAL_SERVER_ERROR,null);
        }
    }

    public ResponseEntity<ApiResponse<String>> forgotPassword(String email) {
        log.info(" Y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u cho email: {}", email);

        if (email == null) {
            log.warn(" Thi·∫øu th√¥ng tin email trong y√™u c·∫ßu forgotPassword");
            return ResponseHandler.generateResponse(Messages.MISSING_REQUIRED_INFO,HttpStatus.BAD_REQUEST,null);
        }

        ResponseEntity<ApiResponse<String>> response = createPasswordResetTokenForEmail(email);
        log.info(" K·∫øt qu·∫£ forgotPassword cho {}: {}", email, response.getBody().getMessage());
        return response;
    }

    public ResponseEntity<ApiResponse<String>> resetPassword(Map<String, String> body) {
        log.info(" Y√™u c·∫ßu reset m·∫≠t kh·∫©u v·ªõi d·ªØ li·ªáu: {}", body);

        String token = body.get("token");
        String newPassword = body.get("password");

        if (token == null || newPassword == null) {
            log.warn(" Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi trong resetPassword");
            return ResponseHandler.generateResponse(Messages.MISSING_REQUIRED_INFO,HttpStatus.BAD_REQUEST,null);
        }

        log.debug(" Token nh·∫≠n ƒë∆∞·ª£c: {}", token);
        log.debug(" M·∫≠t kh·∫©u m·ªõi (·∫©n log gi√° tr·ªã th·ª±c t·∫ø ƒë·ªÉ b·∫£o m·∫≠t)");

        return resetPassword(token, newPassword);
    }

    public ResponseEntity<ApiResponse<String>> createPasswordResetTokenForEmail(String email) {
        log.info(" Y√™u c·∫ßu reset m·∫≠t kh·∫©u cho email: {}", email);

        if (email == null) {
            log.warn(" Thi·∫øu th√¥ng tin email ƒë·∫ßu v√†o");
            return ResponseHandler.generateResponse(Messages.MISSING_REQUIRED_INFO,HttpStatus.BAD_REQUEST,null);
        }

        UserEntity userEntity = userService.findUserByEmail(email);
        log.debug(" T√¨m th·∫•y user: {}", userEntity != null ? userEntity.getEmail() : "Kh√¥ng t√¨m th·∫•y");

        if (userEntity == null || "ROLE_ADMIN".equals(userEntity.getRole())) {
            log.warn(" Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c l√† admin: {}", email);
            return ResponseHandler.generateResponse(Messages.USER_NOT_FOUND,HttpStatus.NOT_FOUND,null);
        }

        if(passwordResetTokenRepository.existsByUserEntityId(userEntity.getId())) {
            return ResponseHandler.generateResponse(Messages.PASSWORD_RESET_ALREADY_REQUESTED,HttpStatus.TOO_MANY_REQUESTS,null);
        }

        String token = jwtTokenProvider.generateAccessToken(userEntity);
        log.info(" Token reset password ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng: {}", token);

        PasswordResetToken passwordResetToken = new PasswordResetToken(userEntity, token, LocalDateTime.now());
        passwordResetTokenRepository.save(passwordResetToken);
        log.info(" ƒê√£ l∆∞u PasswordResetToken v√†o database cho user: {}", email);

        String link = resetUrlPrefix + token;

        String toEmail = email;
        String subject = "Y√™u c·∫ßu reset m·∫≠t kh·∫©u";
        String body = "B·∫°n (ho·∫∑c ai ƒë√≥) ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.\n" +
                "N·∫øu ƒë√∫ng, vui l√≤ng b·∫•m li√™n k·∫øt sau:\n" + link +
                "\nLi√™n k·∫øt h·∫øt h·∫°n sau 1 gi·ªù.";

        emailService.sendEmail(toEmail, subject, body);

        log.info(" ƒê√£ g·ª≠i email reset m·∫≠t kh·∫©u cho: {}", email);

        return ResponseHandler.generateResponse(Messages.PASSWORD_RESET_REQUEST_SUCCESS,HttpStatus.OK,null);

    }

    public ResponseEntity<ApiResponse<String>> resetPassword(String token, String newPassword) {
        log.info(" B·∫Øt ƒë·∫ßu x·ª≠ l√Ω reset password v·ªõi token: {}", token);
        PasswordResetToken prt;
        try {
            prt = passwordResetTokenRepository.findByToken(token)
                    .orElseThrow(() -> new RuntimeException("Link ƒë√£ b·ªã v√¥ hi·ªáu do b·∫°n ƒë√£ s·ª≠ d·ª•ng tr∆∞·ªõc ƒë√≥"));

        } catch (RuntimeException e) {
            log.error(" Token kh√¥ng h·ª£p l·ªá: {}", token);
            return ResponseHandler.generateResponse(Messages.INVALID_INPUT,HttpStatus.BAD_REQUEST,null);
        }


        Date expiration = jwtTokenProvider.getExpirationDate(prt.getToken());
        log.debug(" Token h·∫øt h·∫°n v√†o: {}", expiration);

        if (expiration.before(new Date())) {
            log.warn(" Token ƒë√£ h·∫øt h·∫°n: {}", token);
            passwordResetTokenRepository.delete(prt);
            log.info(" ƒê√£ x√≥a token h·∫øt h·∫°n kh·ªèi database");
            return ResponseHandler.generateResponse(Messages.TOKEN_EXPIRED,HttpStatus.GONE,null);
        }

        UserEntity userEntity = prt.getUser();
        log.info(" ƒêang c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho user: {}", userEntity.getEmail());

        userEntity.setPassword(passwordEncoder.encode(newPassword));
        userService.saveUser(userEntity);
        log.info(" M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng cho: {}", userEntity.getEmail());

        passwordResetTokenRepository.delete(prt);
        log.info(" ƒê√£ x√≥a token sau khi reset password th√†nh c√¥ng");

        return ResponseHandler.generateResponse(Messages.PASSWORD_RESET_SUCCESS,HttpStatus.OK,null);
    }
}
