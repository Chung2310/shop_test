package com.example.shop.service;

import com.example.shop.dto.UserDTO;
import com.example.shop.dto.mapper.UserMapper;
import com.example.shop.dto.request.LoginRequest;
import com.example.shop.dto.request.RefreshTokenRequest;
import com.example.shop.model.ApiResponse;
import com.example.shop.model.User;
import com.example.shop.security.JwtTokenProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class AuthService implements UserDetailsService {

    @Autowired
    private UserService userService;

    @Autowired
    private JwtTokenProvider jwtTokenProvider;

    @Autowired
    private UserMapper userMapper;
    @Autowired
    private PasswordResetService passwordResetService;

    private static final Logger log = LoggerFactory.getLogger(AuthService.class);

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        log.info("üîç [loadUserByUsername] ƒêang t√¨m ng∆∞·ªùi d√πng theo email: {}", email);
        if(email == null ){
            return null;
        }

        User user = userService.findUserByEmail(email);

        if (user == null) {
            log.warn(" [loadUserByUsername] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: {}", email);
            throw new UsernameNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
        }

        log.debug(" [loadUserByUsername] T√¨m th·∫•y ng∆∞·ªùi d√πng: {}", user);

        return new org.springframework.security.core.userdetails.User(
                user.getEmail(),
                user.getPassword(),
                new ArrayList<>()
        );
    }

    public ResponseEntity<ApiResponse<UserDTO>> login(LoginRequest loginRequest) {
        log.info(" [login] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëƒÉng nh·∫≠p cho: {}", loginRequest.getEmail());
        if(loginRequest.getEmail() == null || loginRequest.getPassword() == null){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                    new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p!",null)
            );
        }

        User user = userService.findUserByEmail(loginRequest.getEmail());
        if (user == null) {
            log.warn(" [login] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: {}", loginRequest.getEmail());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
                    new ApiResponse<>(HttpStatus.UNAUTHORIZED.value(), "Email kh√¥ng t·ªìn t·∫°i!", null)
            );
        }

        PasswordEncoder encoder = new BCryptPasswordEncoder();
        if (!encoder.matches(loginRequest.getPassword(), user.getPassword())) {
            log.warn(" [login] M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng cho email: {}", loginRequest.getEmail());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
                    new ApiResponse<>(HttpStatus.UNAUTHORIZED.value(), "Sai m·∫≠t kh·∫©u!", null)
            );
        }

        String accessToken = jwtTokenProvider.generateAccessToken(user);
        String refreshToken = jwtTokenProvider.generateRefreshToken(user);

        log.info(" [login] Access Token: {}", accessToken);
        log.info(" [login] Refresh Token: {}", refreshToken);

        UserDTO userDTO = userMapper.toDto(user);
        userDTO.setToken(accessToken);
        userDTO.setRefreshToken(refreshToken);

        log.info("[login] token: {}",accessToken);

        log.info(" [login] ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho: {}", loginRequest.getEmail());
        return ResponseEntity.ok(
                new ApiResponse<>(HttpStatus.OK.value(), "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", userDTO)
        );
    }

    public ResponseEntity<ApiResponse<UserDTO>> register(User user) {
        log.info("Y√™u c·∫ßu ƒëƒÉng k√Ω v·ªõi email: {}", user.getEmail());
        if(user.getEmail() == null || user.getPassword() == null || user.getFullName() == null){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                    new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng!",null)
            );
        }

        // Ki·ªÉm tra n·∫øu email ƒë√£ t·ªìn t·∫°i
        if (userService.findUserByEmail(user.getEmail()) != null) {
            log.warn("Email {} ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.", user.getEmail());
            return ResponseEntity
                    .status(HttpStatus.CONFLICT)
                    .body(new ApiResponse<>(409, "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!", null));
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        log.debug("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a cho email: {}", user.getEmail());

        // L∆∞u ng∆∞·ªùi d√πng
        User savedUser = userService.saveUser(user);
        log.info("T·∫°o m·ªõi ng∆∞·ªùi d√πng th√†nh c√¥ng: ID = {}, Email = {}", savedUser.getId(), savedUser.getEmail());

        UserDTO userDTO = userMapper.toDto(savedUser);

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(new ApiResponse<>(201, "T·∫°o ng∆∞·ªùi d√πng m·ªõi th√†nh c√¥ng!", userDTO));
    }

    public ResponseEntity<ApiResponse<RefreshTokenRequest>> refreshToken(RefreshTokenRequest refreshTokenRequest) {
        try {
            if(refreshTokenRequest.getAccessToken() == null || refreshTokenRequest.getRefreshToken() == null){
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                        new ApiResponse<>(HttpStatus.BAD_REQUEST.value(),
                                "Thi·∫øu th√¥ng tin y√™u c·∫ßu!",null)
                );
            }

            if (!jwtTokenProvider.validateToken(refreshTokenRequest.getRefreshToken())) {
                log.warn("Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(new ApiResponse<>(HttpStatus.UNAUTHORIZED.value(), "Refresh token kh√¥ng h·ª£p l·ªá",null));
            }

            // 2. Tr√≠ch xu·∫•t username t·ª´ token c≈©
            String email = jwtTokenProvider.extractUsername(refreshTokenRequest.getRefreshToken());
            log.info("ƒêang l√†m m·ªõi token cho user: {}", email);

            // 3. T√¨m user v√† t·∫°o token m·ªõi
            User user = userService.findUserByEmail(email);

            RefreshTokenRequest request = new RefreshTokenRequest();
            request.setAccessToken(jwtTokenProvider.generateAccessToken(user));
            request.setRefreshToken(jwtTokenProvider.generateRefreshToken(user));

            log.info("Token m·ªõi ƒë∆∞·ª£c t·∫°o cho user: {}", email);

            return ResponseEntity.ok(new ApiResponse<>(HttpStatus.OK.value(),"Refresh token th√†nh c√¥ng!" ,request));

        } catch (Exception e) {
            log.error("L·ªói khi l√†m m·ªõi token: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "L·ªói h·ªá th·ªëng khi l√†m m·ªõi token",null));
        }
    }

    public ResponseEntity<ApiResponse<String>> forgotPassword(String email) {
        log.info("üì© Y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u cho email: {}", email);

        if (email == null) {
            log.warn("‚ùå Thi·∫øu th√¥ng tin email trong y√™u c·∫ßu forgotPassword");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                    new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Thi·∫øu th√¥ng tin y√™u c·∫ßu", null)
            );
        }

        ResponseEntity<ApiResponse<String>> response = passwordResetService.createPasswordResetTokenForEmail(email);
        log.info("üì§ K·∫øt qu·∫£ forgotPassword cho {}: {}", email, response.getBody().getMessage());
        return response;
    }

    public ResponseEntity<ApiResponse<String>> resetPassword(Map<String, String> body) {
        log.info("üîë Y√™u c·∫ßu reset m·∫≠t kh·∫©u v·ªõi d·ªØ li·ªáu: {}", body);

        String token = body.get("token");
        String newPassword = body.get("newPassword");

        if (token == null || newPassword == null) {
            log.warn("‚ùå Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi trong resetPassword");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                    new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Thi·∫øu th√¥ng tin y√™u c·∫ßu", null)
            );
        }

        log.debug("üìÑ Token nh·∫≠n ƒë∆∞·ª£c: {}", token);
        log.debug("üîí M·∫≠t kh·∫©u m·ªõi (·∫©n log gi√° tr·ªã th·ª±c t·∫ø ƒë·ªÉ b·∫£o m·∫≠t)");

        passwordResetService.resetPassword(token, newPassword);
        log.info("‚úÖ Reset password th√†nh c√¥ng cho token: {}", token);

        return ResponseEntity.status(HttpStatus.OK).body(
                new ApiResponse<>(HttpStatus.OK.value(), "Reset password th√†nh c√¥ng!", null)
        );
    }
}
