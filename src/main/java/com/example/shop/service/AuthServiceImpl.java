package com.example.shop.service;

import com.example.shop.dto.UserDTO;
import com.example.shop.dto.mapper.UserMapper;
import com.example.shop.dto.request.ChangePasswordRequest;
import com.example.shop.dto.request.LoginRequest;
import com.example.shop.dto.request.RefreshTokenRequest;
import com.example.shop.dto.request.UserUpdateRequest;
import com.example.shop.model.ApiResponse;
import com.example.shop.model.User;
import com.example.shop.repository.UserRepository;
import com.example.shop.security.JwtTokenProvider;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;

@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements UserDetailsService, AuthService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtTokenProvider jwtTokenProvider;

    @Autowired
    private UserMapper userMapper;

    private static final Logger log = LoggerFactory.getLogger(AuthService.class);

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        log.info("üîç [loadUserByUsername] ƒêang t√¨m ng∆∞·ªùi d√πng theo email: {}", email);

        User user = userRepository.findByEmail(email);

        if (user == null) {
            log.warn(" [loadUserByUsername] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: {}", email);
            throw new UsernameNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
        }

        log.debug(" [loadUserByUsername] T√¨m th·∫•y ng∆∞·ªùi d√πng: {}", user);

        return new org.springframework.security.core.userdetails.User(
                user.getEmail(),
                user.getPassword(),
                new ArrayList<>()
        );
    }

    public ResponseEntity<ApiResponse<UserDTO>> login(LoginRequest loginRequest) {
        log.info(" [login] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒëƒÉng nh·∫≠p cho: {}", loginRequest.getEmail());

        User user = userRepository.findByEmail(loginRequest.getEmail());
        if (user == null) {
            log.warn(" [login] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: {}", loginRequest.getEmail());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
                    new ApiResponse<>(HttpStatus.UNAUTHORIZED.value(), "Email kh√¥ng t·ªìn t·∫°i!", null)
            );
        }

        PasswordEncoder encoder = new BCryptPasswordEncoder();
        if (!encoder.matches(loginRequest.getPassword(), user.getPassword())) {
            log.warn(" [login] M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng cho email: {}", loginRequest.getEmail());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
                    new ApiResponse<>(HttpStatus.UNAUTHORIZED.value(), "Sai m·∫≠t kh·∫©u!", null)
            );
        }

        String accessToken = jwtTokenProvider.generateAccessToken(user);
        String refreshToken = jwtTokenProvider.generateRefreshToken(user);

        log.info(" [login] Access Token: {}", accessToken);
        log.info(" [login] Refresh Token: {}", refreshToken);

        UserDTO userDTO = userMapper.toDto(user);
        userDTO.setToken(accessToken);
        userDTO.setRefreshToken(refreshToken);

        log.info("[login] token: {}",accessToken);

        log.info(" [login] ƒêƒÉng nh·∫≠p th√†nh c√¥ng cho: {}", loginRequest.getEmail());
        return ResponseEntity.ok(
                new ApiResponse<>(HttpStatus.OK.value(), "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", userDTO)
        );
    }

    @Override
    public ResponseEntity<ApiResponse<UserDTO>> updateUser(UserUpdateRequest userUpdateRequest) {
        log.info(" [updateUser] B·∫Øt ƒë·∫ßu update t√†i kho·∫£n cho id: {}", userUpdateRequest.getId());
        User user = userRepository.findById(userUpdateRequest.getId()).orElse(null);

        if(user == null) {
            log.warn(" [updateUser] T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng: {}", userUpdateRequest.getId());
            return ResponseEntity.ok(
                    new ApiResponse<>(HttpStatus.CONFLICT.value(), "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!", null)
            );
        }

        user.setFullName(userUpdateRequest.getFullName());
        user.setAddress(userUpdateRequest.getAddress());
        user.setPhone(userUpdateRequest.getPhone());

        userRepository.save(user);

        UserDTO userDTO = userMapper.toDto(user);
        return ResponseEntity.ok(new ApiResponse<>(HttpStatus.OK.value(), "Update th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!",userDTO));
    }

    public ResponseEntity<ApiResponse<UserDTO>> createUser(User user) {
        log.info(" [createUser] B·∫Øt ƒë·∫ßu t·∫°o t√†i kho·∫£n m·ªõi cho email: {}", user.getEmail());

        if (userRepository.findByEmail(user.getEmail()) != null) {
            log.warn(" [createUser] Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng: {}", user.getEmail());
            return ResponseEntity.ok(
                    new ApiResponse<>(HttpStatus.CONFLICT.value(), "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!", null)
            );
        }

        try {
            PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
            user.setPassword(passwordEncoder.encode(user.getPassword()));
            User createdUser = userRepository.save(user);

            UserDTO userDTO = userMapper.toDto(createdUser);

            log.info(" [createUser] T·∫°o t√†i kho·∫£n th√†nh c√¥ng v·ªõi ID: {}", createdUser.getId());

            return ResponseEntity.ok(
                    new ApiResponse<>(HttpStatus.OK.value(), "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng!", userDTO)
            );
        } catch (Exception e) {
            log.error(" [createUser] L·ªói khi t·∫°o t√†i kho·∫£n: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                    new ApiResponse<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng do l·ªói h·ªá th·ªëng!", null)
            );
        }
    }

    public ResponseEntity<ApiResponse<RefreshTokenRequest>> refreshToken(RefreshTokenRequest refreshTokenRequest) {
        String refreshToken = refreshTokenRequest.getRefreshToken();

        if (!jwtTokenProvider.validateToken(refreshToken)) {
            return ResponseEntity.ok(new ApiResponse<>(HttpStatus.UNAUTHORIZED.value(), "Refresh token kh√¥ng h·ª£p l·ªá",null));
        }

        String email = jwtTokenProvider.extractUsername(refreshToken);
        User user = userRepository.findByEmail(email);
        if (user == null) return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();

        String newAccessToken = jwtTokenProvider.generateAccessToken(user);
        String newRefreshToken = jwtTokenProvider.generateRefreshToken(user);

        RefreshTokenRequest refreshTokenRequest1 = new RefreshTokenRequest();
        refreshTokenRequest1.setRefreshToken(newRefreshToken);
        refreshTokenRequest1.setAccessToken(newAccessToken);

        return ResponseEntity.ok(new ApiResponse<>(HttpStatus.OK.value(),"L·∫•y Token m·ªõi th√†nh c√¥ng!",refreshTokenRequest1));
    }

    public ResponseEntity<ApiResponse<String>> changePassword(ChangePasswordRequest changePasswordRequest) {
        User user = userRepository.findById(changePasswordRequest.getId()).orElseThrow();

        PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

        if (passwordEncoder.matches(changePasswordRequest.getOldPassowrd(), user.getPassword())) {
            user.setPassword(passwordEncoder.encode(changePasswordRequest.getNewPassowrd()));
            userRepository.save(user);
            return ResponseEntity.ok(new ApiResponse<>(HttpStatus.OK.value(), "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", null));
        } else {
            return ResponseEntity.ok(new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "Sai m·∫≠t kh·∫©u c≈©!", null));
        }
    }

    public ResponseEntity<ApiResponse<String>> uploadAvatar(Long id, String mode, MultipartFile file) {
        String UPLOAD_DIR = mode+"/";

        try {
            // 1. Ki·ªÉm tra file c√≥ r·ªóng kh√¥ng
            if (file.isEmpty()) {
                System.out.println("[UPLOAD] File tr·ªëng!");
                return ResponseEntity.badRequest().body(
                        new ApiResponse<>(HttpStatus.BAD_REQUEST.value(), "File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", null)
                );
            }

            // 2. Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<User> optionalUser = userRepository.findById(id);
            if (optionalUser.isEmpty()) {
                System.out.println("[UPLOAD] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi id: " + id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(
                        new ApiResponse<>(HttpStatus.NOT_FOUND.value(), "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!", null)
                );
            }

            User user = optionalUser.get();

            // 3. Log th√¥ng tin file
            System.out.println("[UPLOAD] Nh·∫≠n ƒë∆∞·ª£c file: " + file.getOriginalFilename());
            System.out.println("[UPLOAD] K√≠ch th∆∞·ªõc: " + file.getSize() + " bytes");
            System.out.println("[UPLOAD] Content-Type: " + file.getContentType());

            // 4. T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            File uploadDir = new File(UPLOAD_DIR);
            if (!uploadDir.exists()) {
                boolean created = uploadDir.mkdirs();
                System.out.println("[UPLOAD] T·∫°o th∆∞ m·ª•c " + UPLOAD_DIR + ": " + created);
            }

            // 5. T·∫°o t√™n file duy nh·∫•t v√† ƒë∆∞·ªùng d·∫´n
            String fileName = UUID.randomUUID() + "_" + file.getOriginalFilename();
            Path path = Paths.get(UPLOAD_DIR + fileName);

            // 6. L∆∞u file v√†o server
            Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("[UPLOAD] L∆∞u file t·∫°i: " + path.toAbsolutePath());

            // 7. C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n avatar trong database
            user.setAvatarUrl(fileName);  // ho·∫∑c l∆∞u c·∫£ ƒë∆∞·ªùng d·∫´n n·∫øu mu·ªën
            userRepository.save(user);
            System.out.println("[UPLOAD] ƒê√£ c·∫≠p nh·∫≠t avatar cho user ID: " + id);

            // 8. Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng
            return ResponseEntity.ok(
                    new ApiResponse<>(HttpStatus.OK.value(), "T·∫£i l√™n avatar th√†nh c√¥ng!", fileName)
            );

        } catch (IOException e) {
            e.printStackTrace(); // Log l·ªói chi ti·∫øt
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(
                    new ApiResponse<>(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Th·∫•t b·∫°i trong qu√° tr√¨nh t·∫£i file!", null)
            );
        }
    }


}
